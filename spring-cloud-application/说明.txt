spring cloud 为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。它运行环境简单，可以在开发人员的电脑上跑。
另外说明spring cloud是基于springboot的.

一、服务的注册与发现:
1. eureka-server:
eureka是一个高可用的组件，它没有后端缓存，每一个实例注册之后需要向注册中心发送心跳（因此可以在内存中完成），在默认情况下erureka server也是一个eureka client ,必须要指定一个 server。

2. eureka-client:
当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。Eureka server 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。
程序入口处通过注解@EnableEurekaClient 表明自己是一个eurekaclient,同时还需要在配置文件中注明自己的服务注册中心的地址.

二、服务消费者
1. restTemplate+ribbon
业务都会被拆分成一个独立的服务，服务与服务的通讯是基于http restful的。Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign;
ribbon 通过注入restTemplate 使用负载均衡（注入@LoadBalanced）在eureka 消费service_client 的接口.
ribbon 是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为。Feign默认集成了ribbon。
   ribbon 已经默认实现了这些配置bean：
     IClientConfig ribbonClientConfig: DefaultClientConfigImpl
     IRule ribbonRule: ZoneAvoidanceRule
     IPing ribbonPing: NoOpPing
     ServerList ribbonServerList: ConfigurationBasedServerList
     ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter
     ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer
启动eureka-server 工程；启动service-client工程，它的端口为8762；将service-client的配置文件的端口改为8763,并启动，这时你会发现：service-client在eureka-server注册了2个实例，这就相当于一个小的集群。
新建一个spring-boot工程，取名为：service-ribbon; 程序端口为8764,在它的pom.xml文件分别引入起步依赖spring-cloud-starter-eureka、spring-cloud-starter-ribbon、spring-boot-starter-web.
在工程的启动类中,通过@EnableDiscoveryClient向服务中心注册；并且向程序的ioc注入一个bean: restTemplate;并通过@LoadBalanced注解表明这个restRemplate开启负载均衡的功能。
通过之前注入ioc容器的restTemplate来消费service-hi服务的“/hi”接口，在这里我们直接用程序名替代具体的url地址，在ribbon中它会根据服务名来选择具体的服务实例，根据服务实例在请求的时候会用具体的url替换掉服务名
在浏览器上多次访问http://localhost:8764/hi?name=forezp，浏览器交替显示：
hi forezp,i am from port:8762
hi forezp,i am from port:8763
注:
· 一个服务注册中心，eureka server,端口为8761
· service-client 工程跑了两个实例，端口分别为8762,8763，分别向服务注册中心注册
· sercvice-ribbon 端口为8764,向服务注册中心注册
· 当sercvice-ribbon通过restTemplate调用service-hi的hi接口时，因为用ribbon进行了负载均衡，会轮流的调用service-client：8762和8763 两个端口的hi接口；

2. feign
Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解,不需要再使用restTemplate调用eureka接口。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。
· Feign 采用的是基于接口的注解
· Feign 整合了ribbon
新建一个spring-boot工程，取名为serice-feign，在它的pom文件引入Feign的起步依赖spring-cloud-starter-feign、Eureka的起步依赖spring-cloud-starter-eureka、Web的起步依赖spring-boot-starter-web.
在工程的配置文件application.yml文件，指定程序名为service-feign，端口号为8765.
在程序的启动类ServiceFeignApplication ，加上@EnableFeignClients注解开启Feign的功能.
定义一个feign接口，通过@ FeignClient（“服务名”），来指定调用哪个服务。

三、断路器（Hystrix）
在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC 即Remote Procedure Call，远程过程调用），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。为了解决这个问题，业界提出了断路器模型。
注: RPC 主要是基于TCP/IP协议的，而HTTP服务主要是基于HTTP协议的，我们都知道HTTP协议是在传输层协议TCP之上的，所以效率来看的话，RPC当然是要更胜一筹.
Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。 在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：

